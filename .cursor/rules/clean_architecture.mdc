---
description: Clean Architecture agn√≥stica - separa√ß√£o de responsabilidades e depend√™ncias
globs: src//*, app//, domain//
alwaysApply: true
---

## Objetivo
Manter a integridade da Clean Architecture em qualquer projeto, garantindo que cada camada tenha responsabilidades bem definidas e que as depend√™ncias fluam corretamente do exterior para o interior.

## Estrutura de Camadas (Agn√≥stica)

### üìÅ Domain (src/domain/ ou domain/)
**Responsabilidade**: Entidades de neg√≥cio, modelos, exce√ß√µes e interfaces
- ‚úÖ **PODE**: Definir modelos de dados, exce√ß√µes de neg√≥cio, interfaces, regras de neg√≥cio puras
- ‚ùå **N√ÉO PODE**: Importar de outras camadas, acessar banco de dados, fazer I/O, depender de frameworks

```python
# ‚úÖ CORRETO
@dataclass
class User:
    id: str
    email: str
    created_at: datetime

class InvalidUserError(Exception):
    pass

# ‚ùå INCORRETO - n√£o importar de outras camadas
from src.services.user_service import UserService  # ERRADO!
```

### üìÅ Application/Services (src/application/ ou src/services/)
**Responsabilidade**: Casos de uso, l√≥gica de aplica√ß√£o e orquestra√ß√£o
- ‚úÖ **PODE**: Importar do domain, coordenar opera√ß√µes, implementar casos de uso
- ‚ùå **N√ÉO PODE**: Acessar dados diretamente, depender de detalhes de implementa√ß√£o

```python
# ‚úÖ CORRETO
class CreateUserUseCase:
    def __init__(self, user_repo: UserRepository, validator: UserValidator):
        self.user_repo = user_repo
        self.validator = validator

    def execute(self, user_data: dict) -> User:
        self.validator.validate(user_data)
        user = User(**user_data)
        return self.user_repo.save(user)

# ‚ùå INCORRETO - acesso direto a dados
def create_user(self, user_data: dict):
    with open('users.json') as f:  # ERRADO!
```

### üìÅ Infrastructure (src/infrastructure/ ou src/adapters/)
**Responsabilidade**: Implementa√ß√µes concretas, acesso a dados, APIs externas
- ‚úÖ **PODE**: Implementar interfaces do domain, acessar banco de dados, fazer I/O, integrar APIs
- ‚ùå **N√ÉO PODE**: Conter l√≥gica de neg√≥cio, depender de services diretamente

```python
# ‚úÖ CORRETO
class DatabaseUserRepository(UserRepository):
    def save(self, user: User) -> User:
        # Implementa√ß√£o espec√≠fica do banco
        pass

    def find_by_id(self, user_id: str) -> Optional[User]:
        # Query espec√≠fica
        pass

# ‚ùå INCORRETO - l√≥gica de neg√≥cio no repository
def save_with_validation(self, user: User):
    if self.is_email_unique(user.email):  # L√≥gica de neg√≥cio!
        # Valida√ß√£o deve estar no domain/application
```

### üìÅ Presentation (src/presentation/ ou src/controllers/)
**Responsabilidade**: Interface com usu√°rio, APIs, controladores
- ‚úÖ **PODE**: Receber requests, chamar use cases, formatar responses
- ‚ùå **N√ÉO PODE**: Implementar l√≥gica de neg√≥cio, acessar dados diretamente

```python
# ‚úÖ CORRETO
class UserController:
    def __init__(self, create_user_use_case: CreateUserUseCase):
        self.create_user_use_case = create_user_use_case

    def create_user(self, request_data: dict) -> dict:
        user = self.create_user_use_case.execute(request_data)
        return {"id": user.id, "email": user.email}

# ‚ùå INCORRETO - l√≥gica de neg√≥cio no controller
def create_user(self, request_data: dict):
    if len(request_data['email']) < 5:  # Valida√ß√£o deve estar no domain!
```

### üìÅ Utils/Shared (src/utils/ ou src/shared/)
**Responsabilidade**: Utilit√°rios puros, helpers, fun√ß√µes auxiliares
- ‚úÖ **PODE**: Implementar fun√ß√µes puras, formata√ß√£o, c√°lculos gen√©ricos
- ‚ùå **N√ÉO PODE**: Depender de outras camadas espec√≠ficas, ter estado

```python
# ‚úÖ CORRETO
def format_currency(value: float, currency: str = "USD") -> str:
    return f"{currency} {value:,.2f}"

def generate_uuid() -> str:
    return str(uuid.uuid4())

# ‚ùå INCORRETO - depend√™ncia espec√≠fica
def format_user_display(user: User):  # Deveria estar no domain ou application
```

## Regras de Depend√™ncia (Dependency Rule)

### ‚úÖ Fluxo Correto de Depend√™ncias:
```
Presentation ‚Üí Application/Services ‚Üí Domain
    ‚Üì    ‚Üì    ‚Üë
Infrastructure ‚Üê‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îÇ
    ‚Üë    ‚îÇ
Utils/Shared ‚Üê‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

### Princ√≠pios Fundamentais:
1. **Camadas internas n√£o conhecem camadas externas**
2. **Domain √© independente de tudo**
3. **Application coordena mas n√£o implementa detalhes**
4. **Infrastructure implementa interfaces definidas no Domain**
5. **Presentation apenas orquestra chamadas**

### ‚ùå Depend√™ncias Proibidas:
- Domain ‚Üí Application/Services
- Domain ‚Üí Infrastructure  
- Domain ‚Üí Presentation
- Application ‚Üí Infrastructure (apenas via interfaces)
- Application ‚Üí Presentation

## Padr√µes de Implementa√ß√£o

### Dependency Injection:
```python
# ‚úÖ CORRETO - Inje√ß√£o via construtor
class OrderService:
    def __init__(self, 
                 order_repo: OrderRepository,
                 payment_service: PaymentService,
                 notification_service: NotificationService):
        self.order_repo = order_repo
        self.payment_service = payment_service
        self.notification_service = notification_service
```

### Repository Pattern:
```python
# ‚úÖ CORRETO - Interface no Domain
class UserRepository(ABC):
    @abstractmethod
    def save(self, user: User) -> User:
        pass

    @abstractmethod
    def find_by_email(self, email: str) -> Optional[User]:
        pass

# Implementa√ß√£o na Infrastructure
class SQLUserRepository(UserRepository):
    def save(self, user: User) -> User:
        # Implementa√ß√£o espec√≠fica
        pass
```

### Use Case Pattern:
```python
# ‚úÖ CORRETO - Caso de uso espec√≠fico
class AuthenticateUserUseCase:
    def __init__(self, user_repo: UserRepository, password_hasher: PasswordHasher):
        self.user_repo = user_repo
        self.password_hasher = password_hasher

    def execute(self, email: str, password: str) -> AuthResult:
        user = self.user_repo.find_by_email(email)
        if not user or not self.password_hasher.verify(password, user.password_hash):
            raise AuthenticationError("Invalid credentials")
        return AuthResult(user=user, token=self.generate_token(user))
```

## Valida√ß√£o da Arquitetura

### Checklist por Camada:

**Domain:**
- ‚úÖ Apenas entidades, value objects, exce√ß√µes e interfaces
- ‚úÖ Zero imports de outras camadas do projeto
- ‚úÖ Regras de neg√≥cio puras
- ‚úÖ Type hints obrigat√≥rios

**Application/Services:**
- ‚úÖ Implementa casos de uso espec√≠ficos
- ‚úÖ Recebe depend√™ncias via inje√ß√£o
- ‚úÖ Coordena opera√ß√µes sem implementar detalhes
- ‚úÖ Usa interfaces, n√£o implementa√ß√µes concretas

**Infrastructure:**
- ‚úÖ Implementa interfaces definidas no Domain
- ‚úÖ Cont√©m apenas c√≥digo de acesso a dados/APIs
- ‚úÖ Isolada de l√≥gica de neg√≥cio
- ‚úÖ Configura√ß√µes espec√≠ficas de tecnologia

**Presentation:**
- ‚úÖ Apenas recebe input e formata output
- ‚úÖ Chama use cases via inje√ß√£o
- ‚úÖ N√£o cont√©m l√≥gica de neg√≥cio
- ‚úÖ Trata apenas aspectos de apresenta√ß√£o

## Testes por Camada

### Domain (Testes Unit√°rios):
```python
def test_user_creation():
    user = User(id="123", email="test@example.com")
    assert user.is_valid()

def test_invalid_email_raises_exception():
    with pytest.raises(InvalidUserError):
        User(id="123", email="invalid-email")
```

### Application (Testes de Integra√ß√£o com Mocks):
```python
def test_create_user_use_case():
    mock_repo = Mock(spec=UserRepository)
    use_case = CreateUserUseCase(mock_repo)

    result = use_case.execute({"email": "test@example.com"})

    mock_repo.save.assert_called_once()
    assert result.email == "test@example.com"
```

### Infrastructure (Testes de Integra√ß√£o):
```python
def test_database_user_repository():
    repo = DatabaseUserRepository(connection)
    user = User(id="123", email="test@example.com")

    saved_user = repo.save(user)
    found_user = repo.find_by_id("123")

    assert saved_user == found_user
```

## Viola√ß√µes Comuns a Evitar

1. **Domain importando de outras camadas**
2. **Services acessando dados diretamente**
3. **Controllers com l√≥gica de neg√≥cio**
4. **Repositories com regras de valida√ß√£o**
5. **Entidades dependendo de frameworks**
6. **Use cases retornando DTOs espec√≠ficos de apresenta√ß√£o**
7. **Infrastructure vazando para camadas internas**

## Sinais de Viola√ß√£o da Arquitetura

### üö® Red Flags:
- Import de camadas externas no Domain
- L√≥gica de neg√≥cio em Controllers/Repositories
- Acesso direto a banco de dados em Services
- Depend√™ncias circulares entre camadas
- Entidades com anota√ß√µes de framework
- Use cases conhecendo detalhes de HTTP/Database

### ‚úÖ Indicadores de Boa Arquitetura:
- Domain completamente independente
- Testes unit√°rios r√°pidos no Domain
- F√°cil substitui√ß√£o de Infrastructure
- Use cases test√°veis com mocks
- Separa√ß√£o clara de responsabilidades

## Refatora√ß√£o de Viola√ß√µes

Quando encontrar viola√ß√µes:
1. **Identifique a camada correta** para a responsabilidade
2. **Extraia interfaces** se necess√°rio (Domain)
3. **Mova implementa√ß√µes** para Infrastructure
4. **Injete depend√™ncias** via construtor
5. **Atualize testes** para refletir a nova estrutura
6. **Documente mudan√ßas** no hist√≥rico de desenvolvimento

## Ferramentas de Valida√ß√£o

### An√°lise Est√°tica:
```python
# Exemplo de regra para linter personalizado
def check_domain_imports(file_path: str) -> List[str]:
    if 'domain' in file_path:
        # Verificar se h√° imports de outras camadas
        violations = []
        # Implementar verifica√ß√£o
        return violations
```

### Testes Arquiteturais:
```python
def test_domain_has_no_external_dependencies():
    domain_files = get_files_in_package('src.domain')
    for file in domain_files:
        imports = get_imports(file)
        external_imports = [i for i in imports if i.startswith('src.') and 'domain' not in i]
        assert len(external_imports) == 0, f"Domain file {file} has external dependencies: {external_imports}"
```

Esta regra garante que qualquer projeto mantenha os princ√≠pios da Clean Architecture independente da tecnologia ou dom√≠nio espec√≠fico.