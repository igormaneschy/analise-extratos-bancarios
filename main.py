#!/usr/bin/env python3
"""
CLI principal para an√°lise de extratos banc√°rios.
"""
import sys
from pathlib import Path
import click
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich import print as rprint

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.application.use_cases import ExtractAnalyzer
from src.domain.exceptions import DomainException


console = Console()


@click.group()
def cli():
    """Sistema de An√°lise de Extratos Banc√°rios"""
    pass


@cli.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.option('--output', '-o', help='Caminho para salvar o relat√≥rio')
@click.option('--format', '-f', type=click.Choice(['text', 'markdown']), default='text', help='Formato do relat√≥rio')
def analyze(file_path, output, format):
    """Analisa um extrato banc√°rio em PDF."""
    try:
        with console.status("[bold green]Analisando extrato...") as status:
            analyzer = ExtractAnalyzer()
            
            # Se especificou formato markdown, troca o gerador
            if format == 'markdown':
                from src.infrastructure.reports.text_report import MarkdownReportGenerator
                analyzer.use_case.report_generator = MarkdownReportGenerator()
            
            result, report = analyzer.analyze_file(file_path, output)
        
        # Mostra resumo no console
        console.print(Panel.fit(
            f"[bold green]‚úì An√°lise conclu√≠da![/bold green]\n\n"
            f"üìä Total de transa√ß√µes: {result.metadata.get('transaction_count', 0)}\n"
            f"üí∞ Receitas: ‚Ç¨ {result.total_income:,.2f}\n"
            f"üí∏ Despesas: ‚Ç¨ {result.total_expenses:,.2f}\n"
            f"üìà Saldo: ‚Ç¨ {result.net_flow:,.2f}",
            title="Resumo da An√°lise"
        ))
        
        # Mostra alertas se houver
        if result.alerts:
            console.print("\n[bold yellow]‚ö†Ô∏è  Alertas:[/bold yellow]")
            for alert in result.alerts:
                console.print(f"  ‚Ä¢ {alert}")
        
        # Mostra insights
        if result.insights:
            console.print("\n[bold cyan]üí° Insights:[/bold cyan]")
            for insight in result.insights:
                console.print(f"  ‚Ä¢ {insight}")
        
        # Salva ou mostra relat√≥rio completo
        if output:
            console.print(f"\n[green]‚úì Relat√≥rio salvo em: {output}[/green]")
        else:
            console.print("\n[dim]Use --output para salvar o relat√≥rio completo[/dim]")
            if click.confirm("\nDeseja ver o relat√≥rio completo?"):
                console.print("\n" + report)
                
    except FileNotFoundError:
        console.print(f"[bold red]‚ùå Erro: Arquivo '{file_path}' n√£o encontrado![/bold red]")
        sys.exit(1)
    except DomainException as e:
        console.print(f"[bold red]‚ùå Erro: {str(e)}[/bold red]")
        sys.exit(1)
    except Exception as e:
        console.print(f"[bold red]‚ùå Erro inesperado: {str(e)}[/bold red]")
        console.print("[dim]Use --debug para mais informa√ß√µes[/dim]")
        sys.exit(1)


@cli.command()
def sample():
    """Cria um arquivo de exemplo para teste."""
    sample_dir = Path("data/samples")
    sample_dir.mkdir(parents=True, exist_ok=True)
    
    sample_file = sample_dir / "exemplo_instrucoes.txt"
    
    content = """
INSTRU√á√ïES PARA TESTE DO SISTEMA
================================

Para testar o sistema de an√°lise de extratos, voc√™ precisa:

1. Obter um extrato banc√°rio em PDF
   - Pode ser do seu banco (Ita√∫, Bradesco, Santander, etc.)
   - Certifique-se de que √© um PDF com texto (n√£o escaneado)

2. Colocar o arquivo PDF na pasta 'data/samples/'
   - Exemplo: data/samples/extrato_janeiro.pdf

3. Executar a an√°lise:
   python main.py analyze data/samples/extrato_janeiro.pdf

4. Para salvar o relat√≥rio:
   python main.py analyze data/samples/extrato_janeiro.pdf --output relatorio.txt

5. Para gerar relat√≥rio em Markdown:
   python main.py analyze data/samples/extrato_janeiro.pdf --output relatorio.md --format markdown

FORMATO ESPERADO DO PDF
-----------------------
O sistema espera encontrar no PDF:
- Data das transa√ß√µes (formato DD/MM/AAAA ou DD/MM)
- Descri√ß√£o da transa√ß√£o
- Valor (com R$ ou indica√ß√£o de C/D para cr√©dito/d√©bito)
- Saldo (opcional)

LIMITA√á√ïES ATUAIS
-----------------
- Suporta apenas PDFs com texto extra√≠vel
- N√£o processa imagens ou PDFs escaneados
- Categoriza√ß√£o b√°sica por palavras-chave
- Pode precisar ajustes para formatos espec√≠ficos de bancos

PR√ìXIMAS MELHORIAS
------------------
- Integra√ß√£o com IA para melhor categoriza√ß√£o
- Suporte para Excel e CSV
- Detec√ß√£o autom√°tica de padr√µes de bancos
- Interface web
"""
    
    with open(sample_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    console.print(Panel.fit(
        f"[bold green]‚úì Arquivo de instru√ß√µes criado![/bold green]\n\n"
        f"üìÑ Local: {sample_file}\n\n"
        f"[yellow]‚ö†Ô∏è  Importante:[/yellow]\n"
        f"Voc√™ precisa adicionar um PDF de extrato real para testar.\n"
        f"Leia as instru√ß√µes no arquivo criado.",
        title="Instru√ß√µes de Teste"
    ))


@cli.command()
def info():
    """Mostra informa√ß√µes sobre o sistema."""
    table = Table(title="Sistema de An√°lise de Extratos Banc√°rios")
    
    table.add_column("Componente", style="cyan", no_wrap=True)
    table.add_column("Status", style="green")
    table.add_column("Descri√ß√£o", style="white")
    
    table.add_row("Leitor PDF", "‚úì Implementado", "Extrai dados de PDFs banc√°rios")
    table.add_row("Categorizador", "‚úì Implementado", "Categoriza por palavras-chave")
    table.add_row("Analisador", "‚úì Implementado", "Gera insights e alertas")
    table.add_row("Relat√≥rios", "‚úì Implementado", "Texto e Markdown")
    table.add_row("IA", "‚è≥ Planejado", "Integra√ß√£o com GPT/Claude")
    table.add_row("Excel/CSV", "‚è≥ Planejado", "Suporte adicional")
    
    console.print(table)
    
    console.print("\n[bold]Categorias suportadas:[/bold]")
    categories = [
        "Alimenta√ß√£o", "Transporte", "Moradia", "Sa√∫de", 
        "Educa√ß√£o", "Lazer", "Compras", "Servi√ßos",
        "Transfer√™ncia", "Investimento", "Sal√°rio"
    ]
    for cat in categories:
        console.print(f"  ‚Ä¢ {cat}")


if __name__ == '__main__':
    cli()