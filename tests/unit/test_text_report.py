import pytest
from decimal import Decimal
from datetime import datetime
from pathlib import Path
from unittest.mock import patch, mock_open
from src.infrastructure.reports.text_report import TextReportGenerator, MarkdownReportGenerator
from src.domain.models import AnalysisResult, TransactionCategory

class TestTextReportGenerator:
    """Testes para o TextReportGenerator."""
    
    def test_generate_basic_report(self):
        """Testa a gera√ß√£o de um relat√≥rio b√°sico."""
        generator = TextReportGenerator()
        
        analysis = AnalysisResult(
            statement_id="test123",
            total_income=Decimal("1000.00"),
            total_expenses=Decimal("500.00"),
            net_flow=Decimal("500.00"),
            currency="EUR",
            categories_summary={},
            monthly_summary={},
            alerts=[],
            insights=[],
            metadata={}
        )
        
        report = generator.generate(analysis)
        
        # Verifica que o relat√≥rio cont√©m elementos b√°sicos
        assert "RELAT√ìRIO DE AN√ÅLISE DE EXTRATO BANC√ÅRIO" in report
        assert "Total de Receitas" in report
        assert "Total de Despesas" in report
        assert "Saldo do Per√≠odo" in report
        assert "‚Ç¨ 500,00" in report  # Verifica formata√ß√£o de moeda (formato europeu)
    
    def test_generate_report_with_categories(self):
        """Testa a gera√ß√£o de um relat√≥rio com categorias."""
        generator = TextReportGenerator()
        
        analysis = AnalysisResult(
            statement_id="test123",
            total_income=Decimal("1000.00"),
            total_expenses=Decimal("600.00"),
            net_flow=Decimal("400.00"),
            currency="EUR",
            categories_summary={
                TransactionCategory.ALIMENTACAO: Decimal("200.00"),
                TransactionCategory.TRANSPORTE: Decimal("100.00"),
                TransactionCategory.MORADIA: Decimal("300.00")
            },
            monthly_summary={},
            alerts=[],
            insights=[],
            metadata={}
        )
        
        report = generator.generate(analysis)
        
        # Verifica que as categorias est√£o no relat√≥rio
        assert "DESPESAS POR CATEGORIA" in report
        assert "Alimentacao" in report
        assert "Transporte" in report
        assert "Moradia" in report
        assert "33.3%" in report  # Porcentagem de alimenta√ß√£o (200/600)
    
    def test_generate_report_with_monthly_summary(self):
        """Testa a gera√ß√£o de um relat√≥rio com resumo mensal."""
        generator = TextReportGenerator()
        
        analysis = AnalysisResult(
            statement_id="test123",
            total_income=Decimal("1000.00"),
            total_expenses=Decimal("500.00"),
            net_flow=Decimal("500.00"),
            currency="EUR",
            categories_summary={},
            monthly_summary={
                "2023-01": {
                    "income": Decimal("1000.00"),
                    "expenses": Decimal("500.00"),
                    "balance": Decimal("500.00")
                },
                "2023-02": {
                    "income": Decimal("1200.00"),
                    "expenses": Decimal("600.00"),
                    "balance": Decimal("600.00")
                }
            },
            alerts=[],
            insights=[],
            metadata={}
        )
        
        report = generator.generate(analysis)
        
        # Verifica que o resumo mensal est√° no relat√≥rio
        assert "RESUMO MENSAL" in report
        assert "Jan/2023" in report
        assert "Feb/2023" in report  # Verifica a formata√ß√£o correta
    
    def test_generate_report_with_alerts_and_insights(self):
        """Testa a gera√ß√£o de um relat√≥rio com alertas e insights."""
        generator = TextReportGenerator()
        
        analysis = AnalysisResult(
            statement_id="test123",
            total_income=Decimal("1000.00"),
            total_expenses=Decimal("1200.00"),
            net_flow=Decimal("-200.00"),
            currency="EUR",
            categories_summary={},
            monthly_summary={},
            alerts=["Despesas maiores que receitas este m√™s"],
            insights=["Considere reduzir gastos com lazer"],
            metadata={}
        )
        
        report = generator.generate(analysis)
        
        # Verifica que alertas e insights est√£o no relat√≥rio
        assert "ALERTAS" in report
        assert "Despesas maiores que receitas este m√™s" in report
        assert "INSIGHTS E RECOMENDA√á√ïES" in report
        assert "Considere reduzir gastos com lazer" in report
    
    def test_generate_report_with_metadata(self):
        """Testa a gera√ß√£o de um relat√≥rio com metadados."""
        generator = TextReportGenerator()
        
        analysis = AnalysisResult(
            statement_id="test123",
            total_income=Decimal("1000.00"),
            total_expenses=Decimal("500.00"),
            net_flow=Decimal("500.00"),
            currency="EUR",
            categories_summary={},
            monthly_summary={},
            alerts=[],
            insights=[],
            metadata={
                "transaction_count": 25,
                "period_days": 30
            }
        )
        
        report = generator.generate(analysis)
        
        # Verifica que metadados est√£o no relat√≥rio
        assert "INFORMA√á√ïES ADICIONAIS" in report
        assert "Total de transa√ß√µes: 25" in report
        assert "Per√≠odo analisado: 30 dias" in report
    
    @patch("pathlib.Path.write_text")
    def test_generate_report_with_output_path(self, mock_write_text):
        """Testa a gera√ß√£o de um relat√≥rio com caminho de sa√≠da."""
        generator = TextReportGenerator()
        
        analysis = AnalysisResult(
            statement_id="test123",
            total_income=Decimal("1000.00"),
            total_expenses=Decimal("500.00"),
            net_flow=Decimal("500.00"),
            currency="EUR",
            categories_summary={},
            monthly_summary={},
            alerts=[],
            insights=[],
            metadata={}
        )
        
        output_path = Path("test_report.txt")
        report = generator.generate(analysis, output_path)
        
        # Verifica que o m√©todo write_text foi chamado
        mock_write_text.assert_called_once()


class TestMarkdownReportGenerator:
    """Testes para o MarkdownReportGenerator."""
    
    def test_generate_basic_markdown_report(self):
        """Testa a gera√ß√£o de um relat√≥rio b√°sico em Markdown."""
        generator = MarkdownReportGenerator()
        
        analysis = AnalysisResult(
            statement_id="test123",
            total_income=Decimal("1000.00"),
            total_expenses=Decimal("500.00"),
            net_flow=Decimal("500.00"),
            currency="EUR",
            categories_summary={},
            monthly_summary={},
            alerts=[],
            insights=[],
            metadata={}
        )
        
        report = generator.generate(analysis)
        
        # Verifica que o relat√≥rio cont√©m elementos b√°sicos em Markdown
        assert "# Relat√≥rio de An√°lise de Extrato Banc√°rio" in report
        assert "| Total de Receitas |" in report  # Verifica que a tabela cont√©m a coluna
        assert "| **Saldo do Per√≠odo** |" in report  # Verifica que o saldo est√° em negrito
    
    def test_generate_markdown_report_with_categories(self):
        """Testa a gera√ß√£o de um relat√≥rio em Markdown com categorias."""
        generator = MarkdownReportGenerator()
        
        analysis = AnalysisResult(
            statement_id="test123",
            total_income=Decimal("1000.00"),
            total_expenses=Decimal("600.00"),
            net_flow=Decimal("400.00"),
            currency="EUR",
            categories_summary={
                TransactionCategory.ALIMENTACAO: Decimal("200.00"),
                TransactionCategory.TRANSPORTE: Decimal("100.00"),
                TransactionCategory.MORADIA: Decimal("300.00")
            },
            monthly_summary={},
            alerts=[],
            insights=[],
            metadata={}
        )
        
        report = generator.generate(analysis)
        
        # Verifica que as categorias est√£o no relat√≥rio em Markdown
        assert "## üìä Despesas por Categoria" in report
        assert "| Alimentacao | ‚Ç¨ 200,00 | 33.3% |" in report
        assert "| Transporte | ‚Ç¨ 100,00 | 16.7% |" in report
        assert "| Moradia | ‚Ç¨ 300,00 | 50.0% |" in report
    
    def test_generate_markdown_report_with_monthly_summary(self):
        """Testa a gera√ß√£o de um relat√≥rio em Markdown com resumo mensal."""
        generator = MarkdownReportGenerator()
        
        analysis = AnalysisResult(
            statement_id="test123",
            total_income=Decimal("1000.00"),
            total_expenses=Decimal("500.00"),
            net_flow=Decimal("500.00"),
            currency="EUR",
            categories_summary={},
            monthly_summary={
                "2023-01": {
                    "income": Decimal("1000.00"),
                    "expenses": Decimal("500.00"),
                    "balance": Decimal("500.00")
                }
            },
            alerts=[],
            insights=[],
            metadata={}
        )
        
        report = generator.generate(analysis)
        
        # Verifica que o resumo mensal est√° no relat√≥rio em Markdown
        assert "## üìÖ Resumo Mensal" in report
        assert "| Jan/2023 | ‚Ç¨ 1.000,00 | ‚Ç¨ 500,00 | ‚Ç¨ 500,00 |" in report
    
    @patch("pathlib.Path.write_text")
    def test_generate_markdown_report_with_output_path(self, mock_write_text):
        """Testa a gera√ß√£o de um relat√≥rio em Markdown com caminho de sa√≠da."""
        generator = MarkdownReportGenerator()
        
        analysis = AnalysisResult(
            statement_id="test123",
            total_income=Decimal("1000.00"),
            total_expenses=Decimal("500.00"),
            net_flow=Decimal("500.00"),
            currency="EUR",
            categories_summary={},
            monthly_summary={},
            alerts=[],
            insights=[],
            metadata={}
        )
        
        output_path = Path("test_report.md")
        report = generator.generate(analysis, output_path)
        
        # Verifica que o m√©todo write_text foi chamado
        mock_write_text.assert_called_once()